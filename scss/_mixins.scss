@mixin btnshadow {
    box-shadow: 0px 3px 6px $da_orange_color;
}

@mixin btnshadowdark {
    box-shadow: 0px 3px 10px rgba($color: #000000, $alpha: 0.25);
}
@mixin nthChildNav($item, $count) {
    $a-delay: 0.3s;
    $a-duration: 0.3s;

    @for $i from 1 through $count {
        #{$item}:nth-of-type(#{$i}) {
            transition: opacity $a-duration ($a-delay + ($i - 1) * 0.1), transform $a-duration ($a-delay + ($i - 1) * 0.1);
        }
        // @debug $i;
    }
}

@mixin linkbefore {
    &:hover{
        color: $da_orange_color;
        &:before{
            width: 100%;
        }
    }
    &:before{
        position: absolute;
        bottom: -10px;
        content: "";
        left: 0;
        width: 0%;
        height: 1px;
        background-color: $da_orange_color;
        transition: width .3s ease;
    }
}

@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
        font-size: $min-font-size;
        @media screen and (min-width: $min-vw) {
            font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
        }
        @media screen and (min-width: $max-vw) {
            font-size: $max-font-size;
        }
        }
    }
}
@mixin willmove {
    transform: translateY(25px);
    opacity: 0;
    transition: all .3s ease;
}
@mixin normalfont {
    font-family: 'Moderat';
    font-style: normal;
    font-weight: normal;
}
@mixin boldfont {
    font-family: 'ModeratB';
    font-weight: bold;
    font-style: normal;
}
@mixin blackfont {
    font-family: 'ModeratBl';
    font-weight: 900;
    font-style: normal;
}